#!/usr/bin/env python3
import re, shutil, datetime, traceback, argparse
from pathlib import Path
import frontmatter
tmpdir = None

def read(ifile):
    try:
        with open(ifile, "r", encoding="utf-8") as f:
            return frontmatter.load(f)
    except Exception as e:
        print(f"Error on reading {ifile}: {e}")
        exit(1)

def write(post, ofile):
    try:
        if not ofile.parent.is_dir():
            ofile.parent.mkdir(parents=True, exist_ok=True)
        with open(ofile, "w", encoding="utf-8") as f:
            f.write(frontmatter.dumps(post))
    except Exception as e:
        print(f"Error on writing {ofile}: {e}")
        exit(1)

def rename_with_uid(idir, odir, ignore):
    mdfiles = list(idir.rglob("*.md"))
    uids = {}
    
    # Collect uids from frontmatter
    for md in mdfiles:
        post = read(md)
        uid = post.metadata.get("uid")
        if md.stem == "Home":
            uids[md.stem] = "index"
        elif uid:
            uids[md.stem] = uid
        else:
            uids[md.stem] = md.stem

    # Update wiki links
    for md in mdfiles:
        skip = any([p.stem.startswith(i)
                    for i in ignore.split()
                    for p in md.parents])
        if skip: continue

        subdir = md.parent.relative_to(idir)
        post = read(md)
        content = post.content
        outpath = odir / subdir / f"{uids[md.stem]}.md"

        for title, uid in uids.items():
            # title -> uid|title
            pattern1 = re.compile(
                r"\[\[\s*" + re.escape(title) + r"\s*\]\]")
            content = pattern1.sub(f"[[{uid}|{title}]]", content)
            
            # title|alias -> uid|alias
            pattern2 = re.compile(
                r"\[\[\s*" + re.escape(title) + r"\s*\|\s*([^\]]+)\s*\]\]")
            content = pattern2.sub(f"[[{uid}|\\1]]", content)
            
            post.content = content
            write(post, outpath)

def make_backup(odir):
    print("Creating backup...")
    global tmpdir
    now = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    tmpdir = tmpdir / now
    tmpdir.mkdir(parents=True, exist_ok=True)
    for p in odir.glob("*"):
        shutil.move(p, tmpdir)

def clear_backup():
    print("Clearing backup...")
    shutil.rmtree(tmpdir)

def rollback(odir):
    print("Rollback processing...")
    shutil.rmtree(odir)
    tmpdir.mkdir(parents=True, exist_ok=True)
    for p in tmpdir.glob("*"):
        shutil.move(p, odir)

def run(idir, odir, ignore):
    make_backup(odir)
    try:
        rename_with_uid(idir, odir, ignore)
        print("Processing complete!")
        clear_backup()
    except:
        rollback(odir)
        traceback.print_exc()

if __name__ == "__main__":
    tmpdir = Path("/tmp/quartz_backups")
    
    parser = argparse.ArgumentParser(
        description="Rename files with uid, then update wiki links")
    parser.add_argument(
        "-i", default="obsidian", 
        help="Obsidian vault (default: obsidian)")
    parser.add_argument(
        "-o", default="content",
        help="Quartz content (default: content)")
    parser.add_argument(
        "--ignore", default="_ .",
        help="Prefix to ignore (default: \"_ .\")")

    args = parser.parse_args()
    pdir = Path(__file__).parent.parent
    idir = pdir / args.i
    odir = pdir / args.o
    ignore = args.ignore

    run(idir, odir, ignore)