#!/usr/bin/env python3
import re, shutil, datetime, traceback, argparse
from pathlib import Path
import frontmatter
from tqdm import tqdm

# for backup
backup_dir = Path("/tmp")

# [[title]] or [[title|alias]]
WIKI_LINK_PATTERN = re.compile(r'\[\[([^\|\[\]]+)(?:\|([^\[\]]+))?\]\]')
# ```...```
CODE_BLOCK_PATTERN = re.compile(r'```.*?```', re.DOTALL)
# `...`
INLINE_CODE_PATTERN = re.compile(r'`[^`]+`')


def read(ifile):
    try:
        with open(ifile, "r", encoding="utf-8") as f:
            return frontmatter.load(f)
    except Exception as e:
        print(f"[ERROR] Failed to read {ifile}: {e}")
        exit(1)


def write(post, ofile):
    try:
        if not ofile.parent.is_dir():
            ofile.parent.mkdir(parents=True, exist_ok=True)
        with open(ofile, "w", encoding="utf-8") as f:
            f.write(frontmatter.dumps(post))
    except Exception as e:
        print(f"[ERROR] Failed to write {ofile}: {e}")
        exit(1)


def replace_wiki_links(content, uids):
    code_blocks = {}
    inline_codes = {}

    def placeholder_store(pattern, store, prefix):
        def replacer(match):
            key = f"__{prefix}_{len(store)}__"
            store[key] = match.group(0)
            return key
        return pattern.sub(replacer, content)

    content = placeholder_store(CODE_BLOCK_PATTERN, code_blocks, "CODEBLOCK")
    content = placeholder_store(INLINE_CODE_PATTERN, inline_codes, "INLINECODE")

    def replacer(match):
        title = match.group(1)
        alias = match.group(2) or title
        uid = uids.get(title)
        if uid:
            return f"[[{uid}|{alias}]]"
        return match.group(0)

    content = WIKI_LINK_PATTERN.sub(replacer, content)

    for key, value in code_blocks.items():
        content = content.replace(key, value)
    for key, value in inline_codes.items():
        content = content.replace(key, value)

    return content


def run(idir, odir, ignore):
    print("[INFO] Loading all markdown files")
    mds = list(idir.rglob("*.md"))
    posts = [read(md) for md in tqdm(mds, ncols=80, leave=False)]
    uids = {}
    
    print("[INFO] Collecting uids from frontmatter")
    for i, md in tqdm(enumerate(mds), ncols=80, leave=False):
        post = posts[i]
        uid = post.metadata.get("uid")
        if md.stem == "Home":
            uids[md.stem] = "index"
        elif uid:
            uids[md.stem] = uid
        else:
            uids[md.stem] = md.stem

    print("[INFO] Updating wiki links")
    for i, md in tqdm(enumerate(mds), ncols=80, leave=False):
        post = posts[i]
        skip = any([p.stem.startswith(i)
                        for i in ignore.split()
                            for p in md.parents])
        if skip: continue

        subdir = md.parent.relative_to(idir)
        outpath = odir / subdir / f"{uids[md.stem]}.md"

        post.content = replace_wiki_links(post.content, uids)
        write(post, outpath)


def make_backup(odir):
    print("[INFO] Creating backup...")
    global backup_dir
    now = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    backup_dir = backup_dir / now
    backup_dir.mkdir(parents=True, exist_ok=True)
    for p in odir.glob("*"):
        shutil.move(p, backup_dir)


def clear_backup():
    print("[INFO] Clearing backup...")
    shutil.rmtree(backup_dir)


def rollback(odir):
    print("[INFO] Rollback processing...")
    shutil.rmtree(odir)
    backup_dir.mkdir(parents=True, exist_ok=True)
    for p in tmpdir.glob("*"):
        shutil.move(p, odir)


def main(idir, odir, ignore):
    make_backup(odir)
    try:
        run(idir, odir, ignore)
        print("[INFO] Processing complete!")
        clear_backup()
    except:
        rollback(odir)
        traceback.print_exc()


if __name__ == "__main__":
    tmpdir = Path("/tmp/quartz_backups")
    
    parser = argparse.ArgumentParser(
        description="Rename files with uid, then update wiki links")
    parser.add_argument(
        "-i", default="obsidian", 
        help="Obsidian vault (default: obsidian)")
    parser.add_argument(
        "-o", default="content",
        help="Quartz content (default: content)")
    parser.add_argument(
        "--ignore", default="_ .",
        help="Prefix to ignore (default: \"_ .\")")

    args = parser.parse_args()
    pdir = Path(__file__).parent.parent
    idir = pdir / args.i
    odir = pdir / args.o
    ignore = args.ignore

    main(idir, odir, ignore)


