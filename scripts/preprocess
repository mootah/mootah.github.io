#!/usr/bin/env python3
import re
import os
import shutil
import datetime
from pathlib import Path
import traceback
import frontmatter


def read(ifile):
    try:
        with open(ifile, "r", encoding="utf-8") as f:
            return frontmatter.load(f)
    except Exception as e:
        print(f"Error on reading {ifile}: {e}")
        exit(1)

def write(post, ofile):
    try:
        with open(ofile, "w", encoding="utf-8") as f:
            f.write(frontmatter.dumps(post))
    except Exception as e:
        print(f"Error on writing {ofile}: {e}")
        exit(1)

def rename_with_uid(idir, odir):
    mdfiles = list(Path(idir).rglob("*.md"))
    
    uids = {}
    for md in mdfiles:
        post = read(md)
        uid = post.metadata.get("uid")
        if md.stem == "Home":
            uids[md.stem] = "index"
        elif uid:
            uids[md.stem] = uid
        else:
            uids[md.stem] = md.stem

    for md in mdfiles:
        post = read(md)
        content = post.content
        outpath = odir / f"{uids[md.stem]}.md"

        # Update wiki links
        for title, uid in uids.items():
            # [[title]] -> [[uid|title]]
            pattern1 = re.compile(r"\[\[\s*"
                                  + re.escape(title)
                                  + r"\s*\]\]")
            content = pattern1.sub(f"[[{uid}|{title}]]", content)
            
            # [[title|alias]] -> [[uid|alias]]
            pattern2 = re.compile(r"\[\[\s*"
                                  + re.escape(title)
                                  + r"\s*\|\s*([^\]]+)\s*\]\]")
            content = pattern2.sub(f"[[{uid}|\\1]]", content)
            
            post.content = content
            write(post, outpath)

tmpdir = ""
def make_backup(odir):
    print("Creating backup...")
    global tmpdir
    now = int(datetime.datetime.now().timestamp())
    tmpdir = Path(f"/tmp/quartz_backup_{now}")
    os.makedirs(tmpdir, exist_ok=True)
    for p in odir.glob("*"):
        shutil.move(p, tmpdir)

def clear_backup():
    print("Clearing backup...")
    shutil.rmtree(tmpdir)

def rollback(odir):
    print("Rollback processing...")
    shutil.rmtree(odir)
    os.makedirs(odir, exist_ok=True)
    for p in tmpdir.glob("*"):
        shutil.move(p, odir)

if __name__ == "__main__":
    idir = Path(__file__).parent.parent / "obsidian" / "box"
    odir = Path(__file__).parent.parent / "content"
    make_backup(odir)
    try:
        rename_with_uid(idir, odir)
        clear_backup()
        print("Processing complete!")
    except:
        rollback(odir)
        traceback.print_exc()