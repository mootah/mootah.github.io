{"1E4Aca":{"slug":"1E4Aca","filePath":"1E4Aca.md","title":"Zshのセットアップ","links":[],"tags":["Zsh","環境構築"],"content":"Zshのセットアップ\nUbuntuにZshいれる\nbash$ lsb_release -a\n# No LSB modules are available.\n# Distributor ID: Ubuntu\n# Description:    Ubuntu 22.04.5 LTS\n# Release:        22.04\n# Codename:       jammy\nインストール\nbashsudo apt update\nsudo apt install zsh\nシェルを変更して起動\nbashchsh -s /bin/zsh\nexec $SHELL -l\n設定ファイルを作成\nzshvim ~/.zshrc\n~/.zshrcexport LANG=ja_JP.UTF-8\n \ntypeset -U path PATH\npath+=$HOME/.local/bin\n \ntypeset -U fpath FPATH\nfpath+=$HOME/.zsh_completion\n \nautoload -Uz compinit\ncompinit -u\n \nsetopt AUTO_CD\nsetopt CORRECT\nsetopt CORRECT_ALL\nsetopt EXTENDED_HISTORY\nsetopt INC_APPEND_HISTORY\nsetopt SHARE_HISTORY\nsetopt HIST_EXPIRE_DUPS_FIRST\nsetopt HIST_IGNORE_DUPS\nsetopt HIST_IGNORE_ALL_DUPS\n \nexport HISTFILE=~/.zsh_history\nexport HISTSIZE=100000\nexport SAVEHIST=$HISTSIZE\nZinitをインストール\nつよつよパッケージマネージャ\n\nZinit is a flexible and fast Zshell plugin manager that will allow you to install everything from GitHub and other sites.\n\nzshbash -c &quot;$(curl --fail --show-error --silent --location raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&quot;\nzinit self-update\nプラグイン(各種コマンド)のインストール\n~/.zshrc# theme\nzinit depth=1 light-mode for romkatv/powerlevel10k\n \n# fast syntax highlighting\nzinit wait lucid light-mode for zdharma-continuum/fast-syntax-highlighting\n \n# auto suggestion\nzinit wait lucid light-mode for zsh-users/zsh-autosuggestions\n \n# auto completion\nzstyle &#039;:completion:*&#039; menu true\nzstyle &#039;:completion:*&#039; matcher &#039;m:{a-z}={A-Z}&#039;\nzinit wait lucid light-mode for zsh-users/zsh-completions\n \n# fuzzy finder for auto completion\nzinit wait lucid light-mode for Aloxaf/fzf-tab\n \n# fuzzy finder\nzinit wait lucid from&quot;gh-r&quot; sbin&quot;fzf&quot; light-mode for @junegunn/fzf\ncompdef _gnu_generic fzf\n \n# ls alternative\nzinit wait lucid for \\\n  from&quot;gh-r&quot; sbin&quot;eza&quot; light-mode @eza-community/eza \\\n  as&quot;completion&quot; &quot;github.com/eza-community/eza/blob/HEAD/completions/zsh/_eza&quot;\n \nalias ls=&quot;eza --classify=always&quot;\nalias ll=&quot;eza -l --classify=always&quot;\nalias la=&quot;eza -la --classify=always&quot;\nalias tree=&quot;eza -T --classify=always&quot;\n \n# cat alternative\nzinit wait lucid from&quot;gh-r&quot; sbin&quot;bat*/bat&quot; \\\n  mv&quot;bat*/autocomplete/bat.zsh -&gt; _bat&quot; \\\n  light-mode for @sharkdp/bat\n \nexport BAT_THEME=&quot;Visual Studio Dark+&quot;\nexport PAGER=bat\nalias cat=bat\n \n# grep alternative\nzinit wait lucid from&quot;gh-r&quot; sbin&quot;ripgrep*/rg&quot; \\\n  light-mode for @BurntSushi/ripgrep\n \n# find alternative\nzinit wait lucid from&quot;gh-r&quot; sbin&quot;fd*/fd&quot; \\\n  light-mode for @sharkdp/fd\n \n# nvim\nzinit wait lucid from&quot;gh-r&quot; ver&quot;v0.11.1&quot; \\\n  bpick&quot;nvim-linux-x86_64.tar.gz&quot; sbin&quot;**/nvim&quot; \\\n  light-mode for @neovim/neovim\n \nalias vi=nvim\nalias vim=nvim\nexport EDITOR=nvim\nexport VISUAL=nvim\n \nその他のエイリアス\n~/.zshrc# rc\nalias vrc=&quot;vi ~/.config/nvim/init.lua&quot;\nalias rc=&quot;vi ~/.zshrc &amp;&amp; source ~/.zshrc&quot;\n \n# windows exe\nalias clip=&quot;clip.exe&quot;\nalias open=&quot;explorer.exe&quot;"},"1E4Dcm":{"slug":"1E4Dcm","filePath":"1E4Dcm.md","title":"Quartzのセットアップ","links":["1E4vtE","1E4E33","1E5Iwb"],"tags":["Quartz","環境構築","Obsidian"],"content":"Quartzのセットアップ\nObsidian用の静的サイトジェネレータ\nWelcome to Quartz 4を読んでやってく\n手元のnodeがv12とかだったので最新版をインストールする\nNodeをインストールする\nQuartz\n公式通りだとcloneしてorigin変えるみたいな感じっぽかった\nforkしてObsidian Vaultをsubmoduleにすれば良さそう\nQuartzでのみUIDを使う"},"1E4E33":{"slug":"1E4E33","filePath":"1E4E33.md","title":"Nodeをインストールする","links":["1E4FYt"],"tags":[],"content":"Nodeをインストールする\nWSLのUbuntu環境\nzsh$ lsb_release -a\n# No LSB modules are available.\n# Distributor ID: Ubuntu\n# Description:    Ubuntu 22.04.5 LTS\n# Release:        22.04\n# Codename:       jammy\n$ node -v\n# v12.22.9\nnodesource/distributionsの手順通り進める\nzshcurl -fsSL deb.nodesource.com/setup_23.x \\\n     -o nodesource_setup.sh\nsudo -E bash nodesource_setup.sh\nsudo apt-get install -y nodejs\n元々入ってたやつが邪魔して怒られるので先にアンインストールしとく\nzshsudo apt purge libnode-dev\n無事インストールできた\nzshnode -v # v23.11.0\nついでにnpmもアップデートする\nzshsudo npm install -g npm@11.3.0\nnpm -v # 11.3.0\nついでだからBunをインストールする"},"1E4FYt":{"slug":"1E4FYt","filePath":"1E4FYt.md","title":"Bunをインストールする","links":[],"tags":[],"content":"Bunをインストールする\nZigで書かれたNode互換、速いらしい\nzshcurl -fsSL bun.sh/install | bash"},"1E4vtE":{"slug":"1E4vtE","filePath":"1E4vtE.md","title":"Obsidianのセットアップ","links":["1E5q2q","1E5q66","1E4Dcm"],"tags":["Obsidian","環境構築"],"content":"Obsidianのセットアップ\n全体像\nObsidianの設定メモ\nタイトル周り\nObsidianのファイル名にUIDを使う\nQuartzのセットアップ\n次はQuartzのセットアップ"},"1E4yRe":{"slug":"1E4yRe","filePath":"1E4yRe.md","title":"Neovimのセットアップ","links":["1E4Aca","1E5mVA"],"tags":["Neovim","環境構築"],"content":"Neovimのセットアップ\nNeovimのインストール\nWindowsのWSL(Ubuntu 22.04.5 LTS)上にインストールする\naptのneovimは古いので最新版をgithubから拾ってくる\nzinitに管理させてるので詳細はZshのセットアップを参照\nzsh# 確認\nnvim -v\nLazyの導入\npackerなき今、最有力のplugin manager\n🛠️ Installation | lazy.nvim\nここの通りやればおｋ\nテーマ設定\n好きなの入れたらええ\ninit.luarequire(&quot;lazy&quot;).setup({\n    { -- カラースキーム\n        &quot;EdenEast/nightfox.nvim&quot;,\n        config = function()\n            vim.cmd(&quot;colorscheme carbonfox&quot;)\n            -- カーソル行に下線\n            vim.api.nvim_set_hl(\n                0, &#039;CursorLine&#039;, { underline = true })\n        end\n    },\n    { -- ステータスバーをいい感じに\n        &quot;nvim-lualine/lualine.nvim&quot;,\n        dependencies = { &#039;nvim-tree/nvim-web-devicons&#039; },\n        config = function()\n            require(&quot;lualine&quot;).setup{\n                options = { theme = &quot;auto&quot; }\n            }\n        end\n    },\n    \n    ︙\n    \n})\nその他のプラグイン\ninit.luarequire(&quot;lazy&quot;).setup({\n \n    ︙\n \n    { -- インサートモードを抜けるとIMEを切ってくれる\n        &quot;pepo-le/win-ime-con.nvim&quot;\n    },\n    { -- 閉じ括弧\n        &quot;windwp/nvim-autopairs&quot;,\n        event = &quot;InsertEnter&quot;,\n        config = true\n    },\n    { -- 囲い込み\n        &quot;kylechui/nvim-surround&quot;,\n        version = &quot;^3.0.0&quot;,\n        event = &quot;VeryLazy&quot;,\n        config = function()\n            require(&quot;nvim-surround&quot;).setup({})\n        end\n    }\n    { -- コメントアウト\n        &quot;numToStr/Comment.nvim&quot;,\n        config = function()\n            require(&#039;Comment&#039;).setup({\n                toggler = {\n                    line = &#039;&lt;c-t&gt;&#039;,\n                },\n                opleader = {\n                    line = &#039;&lt;c-t&gt;&#039;,\n                },\n            })\n        end\n    },\n})\nオプション\ninit.luavim.opt.encoding = &quot;utf-8&quot;\nvim.opt.fileencoding = &quot;utf-8&quot;\nvim.opt.fileencodings = &quot;utf-8,iso-2022-jp,euc-jp,cp932&quot;\nvim.opt.ignorecase = true\nvim.opt.smartcase = true\nvim.opt.smartindent = true\nvim.opt.autoindent = true\nvim.opt.expandtab = true\nvim.opt.tabstop = 2\nvim.opt.shiftwidth = 2\nvim.opt.number = true\nvim.opt.numberwidth = 4\nvim.opt.cursorline = true\nvim.opt.wrap = true\nvim.opt.incsearch = true\nvim.opt.foldmethod = &quot;marker&quot;\nvim.opt.backup = false\nvim.opt.writebackup = false\nvim.opt.swapfile = false\nvim.opt.clipboard = &quot;unnamedplus&quot;\nvim.opt.mouse = &quot;a&quot;\n余談\n大西配列にしてから一時キーバインドを変えたりしたけど、結果的に特殊なことはしなくなった\nhjklは矢印キーのレイヤー作ったら要らなくなったし、他のキーは覚え直した\n唯一、ciwは左中薬薬で圧倒的な打ちにくさを誇っている"},"1E5Iwb":{"slug":"1E5Iwb","filePath":"1E5Iwb.md","title":"QuartzでのみUIDを使う","links":["1E5q66"],"tags":["Quartz","Obsidian"],"content":"QuartzでのみUIDを使う\n問題点\nObsidianでファイル名をUIDにするとwikiリンクの恩恵を受けにくくなる\n具体的には、\n01.md# hoge\n[[fuga]]\nというファイルがあって\n02.md# fuga\nというファイルをあとから作ったときに\n01.md# hoge\n[[02|fuga]]\nと、自動的に更新してくれない\n解決策\nそこで、Obsidian内ではあくまでH1をファイル名として扱い、\nQuartz側の実行スクリプトでUIDに置換する、ということをやる\nまず、frontmatterを以下のようにする\nfrontmatteruid: &quot;&lt;Templaterで生成&gt;&quot;\ntitle: &quot;&lt;File Title Updaterで更新&gt;&quot;\naliases: []\ntags: []\ncreated: &quot;&lt;Templaterで生成&gt;&quot;\nmodified: &quot;&lt;Update Time on Editで更新&gt;&quot;\n次に、Quartzプロジェクトを以下のようにする\ntree./\n├── content/\n├── obsidian -&gt; symlink or submodule\n├── scripts/\n...\nobsidianはvaultのことで、シンボリックリンクかサブモジュールにする\ncontent内は空にしておき、obsidianから前処理したページを移動してくる\n前処理するスクリプトを書く\n\n全てのファイルのfrontmatterからuidをとってきてリネームする\n全てのファイルのwikiリンクをuidで更新する\n\n[[title]]      → [[uid|title]]\n[[title|alias]] → [[uid|alias]]\n\n\n\nscripts/preprocess#!/usr/bin/env python3\nimport os, re, shutil, datetime, traceback\nfrom pathlib import Path\nimport frontmatter\n \ndef read(ifile):\n  try:\n    with open(ifile, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:\n      return frontmatter.load(f)\n  except Exception as e:\n    print(f&quot;Error on reading {ifile}: {e}&quot;)\n    traceback.print_exc()\n    exit(1)\n \ndef write(post, ofile):\n  try:\n    with open(ofile, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:\n      f.write(frontmatter.dumps(post))\n  except Exception as e:\n    print(f&quot;Error on writing {ofile}: {e}&quot;)\n    traceback.print_exc()\n    exit(1)\n \ndef rename_with_uid(idir, odir):\n  mdfiles = list(Path(idir).rglob(&quot;*.md&quot;))\n  \n  uids = {}\n  for md in mdfiles:\n    post = read(md)\n    uid = post.metadata.get(&quot;uid&quot;)\n    if md.stem == &quot;Home&quot;:\n      uids[md.stem] = &quot;index&quot;\n    elif uid:\n      uids[md.stem] = uid\n    else:\n      uids[md.stem] = md.stem\n \n  for md in mdfiles:\n    post = read(md)\n    content = post.content\n    outpath = odir / f&quot;{uids[md.stem]}.md&quot;\n \n    # Update wiki links\n    for title, uid in uids.items():\n      # title -&gt; uid|title\n      pattern1 = re.compile(\n        r&quot;\\[\\[\\s*&quot;\n        + re.escape(title)\n        + r&quot;\\s*\\]\\]&quot;)\n      content = pattern1.sub(\n        f&quot;[[{uid}|{title}]]&quot;, content)\n      \n      # title|alias -&gt; uid|alias\n      pattern2 = re.compile(\n        r&quot;\\[\\[\\s*&quot;\n        + re.escape(title)\n        + r&quot;\\s*\\|\\s*([^\\]]+)\\s*\\]\\]&quot;)\n      content = pattern2.sub(\n        f&quot;[[{uid}|\\\\1]]&quot;, content)\n      \n      post.content = content\n      write(post, outpath)\n \ntmpdir = &quot;&quot;\n \ndef make_backup(odir):\n  print(&quot;Creating backup...&quot;)\n  global tmpdir\n  now = int(datetime.datetime.now().timestamp())\n  tmpdir = Path(f&quot;/tmp/quartz_backup_{now}&quot;)\n  os.makedirs(tmpdir, exist_ok=True)\n  for p in odir.glob(&quot;*&quot;):\n    shutil.move(p, tmpdir)\n \ndef clear_backup():\n  print(&quot;Clearing backup...&quot;)\n  shutil.rmtree(tmpdir)\n \ndef rollback(odir):\n  print(&quot;Rollback processing...&quot;)\n  shutil.rmtree(odir)\n  os.makedirs(odir, exist_ok=True)\n  for p in tmpdir.glob(&quot;*&quot;):\n    shutil.move(p, odir)\n \nif __name__ == &quot;__main__&quot;:\n  pdir = Path(__file__).parent.parent\n  # input directory\n  idir = pdir / &quot;obsidian&quot; / &quot;box&quot;\n  # output directory\n  odir = pdir / &quot;content&quot;\n  \n  make_backup(odir)\n  try:\n    rename_with_uid(idir, odir)\n    print(&quot;Processing complete!&quot;)\n    clear_backup()\n  except:\n    rollback(odir)\n    traceback.print_exc()\n実行権限を与える\nzshchmod +x scripts/preprocess\nビルド前に叩けばOK\nzshscripts/preprocess &amp;&amp; bun quartz build --serve"},"1E5Izk":{"slug":"1E5Izk","filePath":"1E5Izk.md","title":"Quartzでローカルフォントを使う","links":[],"tags":["Quartz"],"content":"Quartzでローカルフォントを使う\nかえでさんの記事を参考にした\nConfig\nquartz.config.tsconst config: QuartzConfig = {\n  configuration: {\n    ... \n    theme: {\n      fontOrigin: &quot;local&quot;,\n      cdnCaching: false,\n      typography: {\n        header: &quot;LINE Seed JP&quot;,\n        body: &quot;LINE Seed JP&quot;,\n        code: &quot;Juisee&quot;,\n      },\n    },\n    ... \n  },\n}\nフォントフェイス\nquartz/styles/custom.scss@use &quot;./base.scss&quot;;\n \n@font-face {\n    font-family: &quot;LINE Seed JP&quot;;\n    src: url(&quot;/static/fonts/LINESeedJP_OTF_Rg.woff2&quot;) format(&quot;woff2&quot;);\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n \n@font-face {\n    font-family: &quot;LINE Seed JP&quot;;\n    src: url(&quot;/static/fonts/LINESeedJP_OTF_Bd.woff2&quot;) format(&quot;woff2&quot;);\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n \n@font-face {\n    font-family: &quot;Juisee&quot;;\n    src: url(&quot;/static/fonts/Juisee-Regular.ttf&quot;) format(&quot;truetype&quot;);\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n \n@font-face {\n    font-family: &quot;Juisee&quot;;\n    src: url(&quot;/static/fonts/Juisee-Bold.ttf&quot;) format(&quot;truetype&quot;);\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\nOGP\nデフォルトではローカルフォントを見てくれない\nあと、woffに対応していないので注意\nローカルフォントをとってくるユーティリティを作る\nフォントの名前解決をよしなにしてほしい…\nquartz/util/font.tsimport { promises as fs } from &quot;fs&quot;\nimport path from &quot;path&quot;\nimport { QUARTZ } from &quot;./path&quot;\nimport { FontWeight } from &quot;satori/wasm&quot;\nimport chalk from &quot;chalk&quot;\n \nconst fontDir = path.join(QUARTZ, &quot;static&quot;, &quot;fonts&quot;)\n \ntype FontDict = { [rawFontName: string]: { [weight: number]: string } }\n \nconst localFonts: FontDict = {\n  &quot;LINE Seed JP&quot;: {\n    400: &quot;LINESeedJP_OTF_Rg.otf&quot;,\n    700: &quot;LINESeedJP_OTF_Bd.otf&quot;,\n  },\n  &quot;Juisee&quot;: {\n    400: &quot;Juisee-Regular.ttf&quot;,\n    700: &quot;Juisee-Bold.ttf&quot;,\n  },\n}\n \nexport async function getLocalFontData(rawFontName: string, weight: FontWeight) {\n  const fontName = localFonts[rawFontName][weight]\n  const fontPath = path.join(fontDir, fontName)\n  try {\n    await fs.access(fontPath)\n    return fs.readFile(fontPath)\n  } catch (error) {\n    console.log(\n      chalk.blue(\n        `\\nInfo: Failed to get local font ${rawFontName} with weight ${weight}`,\n      ),\n    )\n  }\n  return undefined\n}\nGoogle Fontsを取りに行く前に差し込む\nquartz/util/og.tsximport { getLocalFontData } from &quot;./font&quot;\n \n...\n \nexport async function fetchTtf(\n  rawFontName: string,\n  weight: FontWeight,\n): Promise&lt;Buffer&lt;ArrayBufferLike&gt; | undefined&gt; {\n \n  const localFontData = await getLocalFontData(rawFontName, weight)\n  if (localFontData) {\n    return localFontData;\n  }\n  ...  \n}"},"1E5cv5":{"slug":"1E5cv5","filePath":"1E5cv5.md","title":"ZMKを読む（導入編）","links":["1E5fF9","1E5eU8"],"tags":["ZMK","自キ","キーボード"],"content":"ZMKを読む（導入編）\nZMKのドキュメントを読んでいく\nZMKとは\nZephyrベースのキーボードファームウェア\nMITライセンスのオープンソースプロジェクト\nワイヤレスファーストを謳っている\n用語\nBoard (ボード)\nMCUボード単体またはMCUを含むコントローラコンポーネント\nオンボードコントローラの場合はPCB全体を指す\nShield (シールド)\nボードと組み合わせることで最終的なキーボードとなるようなシェルコンポーネント\nボードフットプリント、スイッチフットプリントを持つPCBのこと\nInterconnect (インターコネクト)\nシールドにあるボードを搭載するフットプリントのこと\nSelf-contained Keyboard (自己完結キーボード)\nオンボードコントローラを使用している等、MCUとシェルPCBが一体となっているキーボード\n全てのZMK定義がボードにあり、シールド定義はない\nComposite Keyboards (複合キーボード)\nボードとシールドからなるキーボード\nシールド定義内にZMK統合部が配置され、同じインターコネクトを持つ複数のボード（Pro Microとnice!nanoなど）に対応することができる\n環境構築\nZMK CLI (EXPERIMENTAL) をインストールする\nバグを見つけたら報告しよう\nPrerequisite\nzshgit --version # 2.34.1 &gt; any\npython3 --version # 3.10.12 &gt; 3.10\npipx --version # 1.0.0 &gt; any\nInstall\nzshpipx install zmk\nzmk --version # 0.2.0\n作業ディレクトリを作成\nzshzmk init\n# FATAL ERROR: can&#039;t init: no west.yml found \nGitHubリポジトリを教える\nテンプレートを使って作ったリポジトリを想定してるっぽいが、\nよくわからなかったので空のまま与えると怒られる\nしかたがないので、Setup Scriptを使う\nzshbash -c &quot;$(curl -fsSL zmk.dev/setup.sh)&quot;\nshieldとboardを選ばされるのでhummingbirdとxiaoを選んだ\nこいつはこいつで、GitHubにhttpsアクセスでpushしようとして失敗するので、自分でpushする\npushするとGitHubが自動的にファームウェアをビルドしてくれる\nzshgit remote remove origin\ngit remote add origin git@github.com:&lt;user&gt;/zmk-config.git\ngit push -U origin main\nためしにzmkコマンドを叩いてみたらzmk initでするはずだったらしき初期化がちゃんと走った\nzshzmk keyboard list # Initializing west application...\nディレクトリ構成はこうなった\n~/zmk-config main \n❯ tree\n./\n├── boards/\n│   └── shields/\n├── build.yaml\n├── config/\n│   ├── hummingbird.conf\n│   ├── hummingbird.keymap\n│   └── west.yml\n└── zephyr/\n    └── module.yml\n\npushしたら次のコマンドでGitHub Actionsのページを開く\nzshzmk download\nが、以下2点問題があって上手くいかない\n\nWSLにxdg-openコマンドがない → WSLでxdg-openしたい\nリモートURLがsshなのでブラウザで開けない\n\nまあ別に自分で開けばいい\nZMKを読む（Config編）に続く"},"1E5eU8":{"slug":"1E5eU8","filePath":"1E5eU8.md","title":"ZMKを読む（Config編）","links":[],"tags":["ZMK","自キ","キーボード"],"content":"ZMKを読む（Config編）"},"1E5fF9":{"slug":"1E5fF9","filePath":"1E5fF9.md","title":"WSLでxdg-openしたい","links":[],"tags":["WSL"],"content":"WSLでxdg-openしたい\nwsl-openというのがある\nzshbun install -g wsl-open\nシムリンクを張る\nzshln -s $(which wsl-open) $HOME/.local/bin/xdg-open"},"1E5kRj":{"slug":"1E5kRj","filePath":"1E5kRj.md","title":"非分割エルゴキーボードを作りたい","links":["1E5cv5"],"tags":["自キ","キーボード"],"content":"非分割エルゴキーボードを作りたい\n分割キーボードは充電やら持ち運んでセッティングやらがだるい\n非分割を探すとBluetoothが使えてGateron LPなやつがありそうでない\nなんならChoc v2ですらない\n要件\n\n形状: 42keys column staggered splay unibody\nMCU: Xiao BLE\nキースイッチ: Gateron LP\n\n類似のキーボード\n\nPJE66/hummingbird\n\nXiao BLE, Choc v1, 30keys\n\n\nlpgalaxy/revxlp\n\nXiao BLE, Choc v1, 42keys\n\n\nkapee1/osprey-remix\n\nnice!nano, Choc v1, 42keys\n\n\npenk/LoremIpsum36\n\nRP2040-Zero, Gateron LP, 36keys\n\n\ngtips/reviung\n\nnice!nano, MX, 41keys\nCreating a New ZMK Shield for the Reviung41 - YouTube\n\n\n\n学ぶべきこと\n\nKiCadで基板を設計\nZMKでファームウェアを実装\nFusion360でケースをモデリング\nはんだ付け\n"},"1E5mVA":{"slug":"1E5mVA","filePath":"1E5mVA.md","title":"大西配列を改変する","links":[],"tags":["キーボード"],"content":"大西配列を改変する\n\n大西配列からの変更点\n\nJ → Z\n\n大西配列はZXCVを保存しているが、かなで使用するZは右手にほしい\n\n\nW → J\n\nWはJより高頻度だが、「わ」と「を」に偏っていることから、より母音と切り離したいJを右手に配置\n\n\nL → W\n\n「わ、を」の次に頻度の高い「うぇ」でも踏まない\n\n\nZ → L\n\nかなでは一切使用しないLを小指に配置した\n&lt;CTRL-Z&gt;が左手にほしいので&lt;MOD-L&gt;をUndoにした\n\n\n, → F\n\n個人的に最も打ちにくい右人差し指斜め上を回避した\n\n\nR ←&gt; H\n\nHと共起する子音の打ちやすさを改善\n\nかなにおけるSH, HY, TH, DH\n英字におけるTH, GH, PH\n\n\nHよりRが高頻度\n\n大西さんの記事の100万字における使用頻度（スプシ）を参照\n\n\nRYよりHYが高頻度\n\n10万字サンプルにおける 2-gram 頻度を参照\n\n\n\n\n\n妥協ポイント\nWI, FO, VO, AUは左手で踏むことになる\n距離の比較\n\nヒートマップ\n\n最終形\n"},"1E5q2q":{"slug":"1E5q2q","filePath":"1E5q2q.md","title":"Obsidianの設定メモ","links":[],"tags":[],"content":"Obsidianの設定メモ\nどこになにを設定したか忘れるので一覧\n後にSettings Searchいれて迷う必要なくなった\nGeneral\n\n特になし\n\nEditor\n\nProperties in document → Hidden\n\n上の方がごちゃつくのやなので非表示\nプラグインでサイドバーに表示する（後述）\n\n\nIndent using tabs → Off\n\nインデントはスペースで\n\n\nVim key bindings → On\n\nvimmerです\n\n\n\nFiles and links\n\nAutomatically update internal links → On\n\nタイトル変更時にバックリンクを自動置換\n\n\nDefault location for new notes → Specified\n\n全て同じディレクトリに放る\n\n\nNew link format → Shortest\n\nファイル名のみにする\n\n\n\nAppearence\n\nShow inline title → Off\n\nデフォルトではファイル名がタイトルになるが非表示\nH1をタイトルとして扱うプラグインをいれる（後述）\n\n\n\nCore plugins\n\nProperties View → On\n\nfrontmatterをサイドバーに表示\n\n\nTemplates → Off\n\nTemplater（後述）使うのでオフ\n\n\n\nCommunity plugins\n\nSettings Search\n\n設定を検索できる\n\n\nBRAT\n\nコミュニティプラグインに登録されていないものもgithubからインストールしてくれる\n\n\nFront Matter Title\n\nfrontmatterのtitle、H1をタイトルとして扱ってくれる\n\n\nFile Title Updater\n\nH1からfrontmatter titleを更新してくれる\n\n\nUpdate Time on Edit\n\nfrontmatterに更新日時を差し込んでくれる\n\n\nTemplater\n\nテンプレートをJavaScriptで書ける\n\n\nAuto Link Title\n\nURLからページタイトルを取ってきてくれる\n\n\n2Hop Links Plus\n\nScrapboxのやつ、いらないかも\n\n\nMinimal Theme Settings\n\nMinimalテーマに細かい調整を入れられる\n\n\nVimrc Support\n\nvimmerです\n\n\n"},"1E5q66":{"slug":"1E5q66","filePath":"1E5q66.md","title":"Obsidianのファイル名にUIDを使う","links":["1E5Iwb"],"tags":["Obsidian"],"content":"Obsidianのファイル名にUIDを使う\n\n\n                  \n                  Warning\n                  \n                \n\n\nこの方法はやめました。QuartzでのみUIDを使うを参照\n\n\n\nQuartzで公開することを考えるとページのURLにマルチバイト文字がごちゃついてるのは避けたい\nなのでファイル名としてはUniqueなIDを振る\nZettelkasten的にも推奨されてるっぽい\nwikiリンクやサイドバーに謎の文字列を表示したくないのでプラグインでなんとかする\nTemplaterでUIDを振る\nUnixタイムスタンプを64進数表示してUIDとしてファイル名にする\nconst digit = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_&quot;;\nto64 = x =&gt; x.toString(2).split(/(?=(?:.{6})+(?!.))/g).map(v =&gt; digit[parseInt(v, 2)]).join(&quot;&quot;)\n \nconst uid = to64(parseInt(tp.date.now(&quot;X&quot;)));\nawait tp.file.rename(uid);\nfrontmatterのタイトルはとりあえず初期値tp.file.titleを入れておく\nwikiリンクを飛んできた場合はそのタイトルが入り、新規作成したときはUntitledが入る\n---\nuid: &lt;% uid %&gt;\ntitle: &lt;% tp.file.title %&gt;\naliases: []\ntags: []\ncreated: &lt;% tp.date.now(&quot;YYYY-MM-DD&quot;) %&gt;\nupdated: \n---\n同様にH1も初期化\n# &lt;% tp.file.title %&gt;\nFront Matter Titleで表示を直す\nH1をタイトルとみなして、サイドバーやwikiリンクを表示させる\n\nCommon main template → #heading\n\nFile Title Updaterでfrontmatterのtitleを自動設定する\nQuartzにタイトルとして扱ってもらうために、\nfrontmatterのtitleをH1で更新する\n\nDefault title source → first_heading\nSync mode            → Frontmatter + Heading\n\n保存をHookしてくれたりはしないっぽい\nショートカットキーを設定するか、&lt;Ctrl-P&gt;から呼び出すしかない"},"index":{"slug":"index","filePath":"index.md","title":"Home","links":["1E4vtE"],"tags":[],"content":"Home\nObsidianはじめました\nページが増えたらMOC的なの作ります\nメモはこれまでKeep + Scrapboxで運用していましたが\nKeepは日常の些事専用、Scrapboxはリンク集と化してしまっているので\n元々Scrapboxが担っていた情報の保存をObsidianに担当させようと思います"}}